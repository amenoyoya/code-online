/**
 * Channel 型は、チャネルオペレータ（<-）を用いて値の送受信を行う通り道の役割を果たす
 *   ch <- v    // データ v をチャネル ch に送信
 *   v := <- ch // チャネル ch が受信したデータを変数 v に割り当てる
 *
 * チャネルを用いたデータ伝搬は矢印の方向（右から左）へ流れるが、通常、片方がデータが準備完了になるまで送受信はブロックされる
 * この性質を利用して goroutine におけるデータの同期が可能である
 *
 * チャネルは、マップやスライス同様、make 関数で生成する必要がある
 *   ch := make(chan <型名>)
 */

package main

import "fmt"

// sum 関数: int配列の値をすべて加算し、チャネル c に送信する
func sum(s []int, c chan int) {
	sum := 0
	for _, v := range s {
		sum += v
	}
	c <- sum // sum の値をチャネル c に送信
}

func main() {
	// 計算対象の int配列
	s := []int{7, 2, 8, -9, 4, 0}

	// int型チャネル生成
	c := make(chan int)

	// s[0 : 2] と s[3 : 5] に対して sum 関数をそれぞれ並列実行
	// => これにより逐次実行より高速に sum 関数を実行できる
	go sum(s[: len(s) / 2], c)
	go sum(s[len(s) / 2 :], c)

	// チャネルを通して計算結果を受信
	// チャネルはスタックされるため、以下のように複数の値を受信可能
	x, y := <-c, <-c

	// x + y を計算すれば sum(s, c) と同じ計算結果になる
	fmt.Println(x, y, x + y)
}
